{"project": "activitysim", "project_url": "https://activitysim.github.io/", "show_commit_url": "http://github.com/ActivitySim/activitysim/commit/", "hash_length": 8, "revision_to_hash": {"1020": "7b57c94e12d27a23f86c8988117e885ae754c44e", "1061": "a3dca1f8280374cc3fa22aa27d0503a20f3bdf58", "1182": "3b70dfc00fa020f3f3527653a29d042c12426754", "1190": "fe2614d41f674fc38d2d693523e80f8cc5fad4a1", "1214": "964ee009f81f2fe14e908ed8a3f1881f04d07127", "1318": "31705411a0632ebe02213ce3cd5fa069fade0d63", "1466": "885f5874c499f041442d1376fbd401281e0db369", "1477": "bcdc7b63d4ff7bc2703810e226090c75c380bda4", "1543": "5803923238856a4be95a27a778f2478225484b8c", "1551": "a57efa1418320cb88d72ad5f413aaa45131183a4", "1658": "43723e1364dd33837501381c63f7db2433d12133", "1661": "d059d3ba06b925eee24a36aead23c4514e690b0d", "1662": "20ec9f1204d6ce53a86d6086323272ccb9399f5c"}, "revision_to_date": {"1020": 1572549173000, "1061": 1580841180000, "1182": 1599181680000, "1190": 1599766654000, "1214": 1603223741000, "1318": 1610604744000, "1466": 1619105583000, "1477": 1619207274000, "1543": 1623452572000, "1551": 1623724154000, "1658": 1626562678000, "1661": 1626632246000, "1662": 1626704031000}, "params": {"arch": ["x86_64"], "cpu": ["Intel Xeon E5-2697 v4 @ 2.30GHz (36 cores)", "Intel Xeon E5-2699 v4 @ 2.20GHz (44 cores)", "Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz"], "machine": ["CS-CAMCWS01", "CS-HPC02", "LUMBERJACK"], "num_cpu": ["16", "72", "88"], "os": ["Darwin 19.6.0", "Windows 10", "Windows 2012ServerR2"], "ram": ["512GB", "64GB", "96GB"], "python": ["3.9"], "coverage": [""], "cytoolz": [""], "numba": [""], "numpy": [""], "openmatrix": [""], "orca": [""], "pandas": ["1.2"], "psutil": [""], "pyarrow": [""], "pytables": [""], "pytest": [""], "pyyaml": [""], "requests": [""], "ruamel.yaml": [""], "toolz": [""], "branch": ["master", "performance1", "performance2"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz", "machine": "LUMBERJACK", "num_cpu": "16", "os": "Darwin 19.6.0", "ram": "64GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance2"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz", "machine": "LUMBERJACK", "num_cpu": "16", "os": "Darwin 19.6.0", "ram": "64GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance1"}, {"arch": "x86_64", "cpu": "Intel Xeon E5-2697 v4 @ 2.30GHz (36 cores)", "machine": "CS-CAMCWS01", "num_cpu": "72", "os": "Windows 10", "ram": "96GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance2"}, {"arch": "x86_64", "cpu": "Intel Xeon E5-2697 v4 @ 2.30GHz (36 cores)", "machine": "CS-CAMCWS01", "num_cpu": "72", "os": "Windows 10", "ram": "96GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance1"}, {"arch": "x86_64", "cpu": "Intel Xeon E5-2699 v4 @ 2.20GHz (44 cores)", "machine": "CS-HPC02", "num_cpu": "88", "os": "Windows 2012ServerR2", "ram": "512GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance2"}, {"arch": "x86_64", "cpu": "Intel Xeon E5-2699 v4 @ 2.20GHz (44 cores)", "machine": "CS-HPC02", "num_cpu": "88", "os": "Windows 2012ServerR2", "ram": "512GB", "python": "3.9", "coverage": "", "cytoolz": "", "numba": "", "numpy": "", "openmatrix": "", "orca": "", "pandas": "1.2", "psutil": "", "pyarrow": "", "pytables": "", "pytest": "", "pyyaml": "", "requests": "", "ruamel.yaml": "", "toolz": "", "branch": "performance1"}], "benchmarks": {"mtc1.time_atwork_subtour_destination.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_atwork_subtour_destination.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:atwork_subtour_destination", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_atwork_subtour_frequency.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_atwork_subtour_frequency.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:atwork_subtour_frequency", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_atwork_subtour_mode_choice.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_atwork_subtour_mode_choice.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:atwork_subtour_mode_choice", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_atwork_subtour_scheduling.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_atwork_subtour_scheduling.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:atwork_subtour_scheduling", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_auto_ownership_simulate.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_auto_ownership_simulate.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:auto_ownership_simulate", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_cdap_simulate.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_cdap_simulate.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:cdap_simulate", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_free_parking.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_free_parking.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:free_parking", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_joint_tour_composition.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_joint_tour_composition.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:joint_tour_composition", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_joint_tour_destination.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_joint_tour_destination.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:joint_tour_destination", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_joint_tour_frequency.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_joint_tour_frequency.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:joint_tour_frequency", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_joint_tour_participation.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_joint_tour_participation.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:joint_tour_participation", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_joint_tour_scheduling.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_joint_tour_scheduling.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:joint_tour_scheduling", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_mandatory_tour_frequency.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_mandatory_tour_frequency.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:mandatory_tour_frequency", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_mandatory_tour_scheduling.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_mandatory_tour_scheduling.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:mandatory_tour_scheduling", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_non_mandatory_tour_destination.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_non_mandatory_tour_destination.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:non_mandatory_tour_destination", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_non_mandatory_tour_frequency.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_non_mandatory_tour_frequency.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:non_mandatory_tour_frequency", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_non_mandatory_tour_scheduling.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_non_mandatory_tour_scheduling.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:non_mandatory_tour_scheduling", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_school_location.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_school_location.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:school_location", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_stop_frequency.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_stop_frequency.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:stop_frequency", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_tour_mode_choice_simulate.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_tour_mode_choice_simulate.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:tour_mode_choice_simulate", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_trip_destination.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_trip_destination.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:trip_destination", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_trip_mode_choice.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_trip_mode_choice.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:trip_mode_choice", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_trip_purpose.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_trip_purpose.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:trip_purpose", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_trip_purpose_and_destination.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_trip_purpose_and_destination.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:trip_purpose_and_destination", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_trip_scheduling.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_trip_scheduling.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:trip_scheduling", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}, "mtc1.time_workplace_location.time_component": {"code": "class ComponentTiming:\n    def time_component(self):\n        componentwise.run_component(self.component_name)\n\n    def setup(self):\n        componentwise.setup_component(self.component_name, model_dir(), PRELOAD_INJECTABLES)\n\ndef setup_cache():\n\n    if workspace.get_dir() is None:\n        from asv.console import log\n        for k,v in os.environ.items():\n            log.error(f\" env {k}: {v}\")\n        raise RuntimeError(\"workspace unavailable\")\n    os.makedirs(os.path.join(local_dir(), \"models\"), exist_ok=True)\n    get_example(\n        example_name=EXAMPLE_NAME,\n        destination=os.path.join(local_dir(), \"models\"),\n    )\n    settings_filename = os.path.join(model_dir(), \"configs\", \"settings.yaml\")\n    with open(settings_filename, 'rt') as f:\n        models = yaml.load(f, Loader=yaml.loader.SafeLoader).get('models')\n\n    last_component_to_benchmark = 0\n    for component_name in COMPONENT_NAMES:\n        last_component_to_benchmark = max(\n            models.index(component_name),\n            last_component_to_benchmark\n        )\n    pre_run_model_list = models[:last_component_to_benchmark]\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"settings.yaml\"),\n        **BENCHMARK_SETTINGS,\n        models=pre_run_model_list,\n        checkpoints=True,\n        trace_hh_id=None,\n        chunk_training_mode='off',\n    )\n    modify_yaml(\n        os.path.join(model_dir(), \"configs\", \"network_los.yaml\"),\n        read_skim_cache=True,\n    )\n    componentwise.pre_run(model_dir())", "min_run_count": 2, "name": "mtc1.time_workplace_location.time_component", "number": 1, "param_names": [], "params": [], "pretty_name": "example_mtc_full:workplace_location", "processes": 2, "sample_time": 0.01, "setup_cache_key": "/Users/jeffnewman/LocalGit/activitysim_benchmarks/benchmarks/mtc1.py:69", "timeout": 36000.0, "type": "time", "unit": "seconds", "version": "8592f19e902161115468ea73d8595d4151c9b826b7d334da36c48ad7a79f3965", "warmup_time": -1}}, "machines": {"LUMBERJACK": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz", "machine": "LUMBERJACK", "num_cpu": "16", "os": "Darwin 19.6.0", "ram": "64GB", "version": 1}, "CS-CAMCWS01": {"arch": "x86_64", "cpu": "Intel Xeon E5-2697 v4 @ 2.30GHz (36 cores)", "machine": "CS-CAMCWS01", "num_cpu": "72", "os": "Windows 10", "ram": "96GB", "version": 1}, "CS-HPC02": {"arch": "x86_64", "cpu": "Intel Xeon E5-2699 v4 @ 2.20GHz (44 cores)", "machine": "CS-HPC02", "num_cpu": "88", "os": "Windows 2012ServerR2", "ram": "512GB", "version": 1}}, "tags": {"0.9.1": 1020, "0.9.2": 1061, "0.9.5": 1182, "0.9.5.1": 1190, "0.9.5.2": 1214, "0.9.7": 1318, "v0.9.9": 1466, "v0.9.9.1": 1477, "v1.0": 1543, "v1.0.1": 1551}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}